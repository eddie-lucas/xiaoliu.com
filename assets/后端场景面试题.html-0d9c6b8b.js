import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o,c as p,a as n,b as a,d as c,e as l}from"./app-3d4993ca.js";const i={},r=l(`<h2 id="_1-一笔订单-在取消的那一刻用户刚好付款了-怎么办" tabindex="-1"><a class="header-anchor" href="#_1-一笔订单-在取消的那一刻用户刚好付款了-怎么办" aria-hidden="true">#</a> 1. 一笔订单，在取消的那一刻用户刚好付款了，怎么办？</h2><h2 id="_2-如何避免出现重复顶订单" tabindex="-1"><a class="header-anchor" href="#_2-如何避免出现重复顶订单" aria-hidden="true">#</a> 2. 如何避免出现重复顶订单？</h2><h3 id="版本1" tabindex="-1"><a class="header-anchor" href="#版本1" aria-hidden="true">#</a> 版本1</h3><p>出现重复订单的情况是因为系统针对下单的方法没有做幂等性设计</p><ol><li>数据库主键唯一性约束：可以将订单号作为数据库的主键，这样一来，数据库就会拒接重复插入的情况，避免重复订单</li><li>分布式锁：也可以利用分布式锁来避免多个请求同时处理同一笔订单的情况，比如可以利用redis来实现：</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> lockKey <span class="token operator">=</span> <span class="token string">&quot;order_lock_&quot;</span> <span class="token operator">+</span> orderNo<span class="token punctuation">;</span>
<span class="token keyword">boolean</span> isLocked <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span> <span class="token string">&quot;locked&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>isLocked<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 处理订单逻辑</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 已经有请求在处理订单</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里需要注意，lockKey应该是&quot;order_lock_&quot; + orderNo这种以订单号维度加锁，避免同笔订单多次插入的同时，锁的粒度也足够细</p><h3 id="版本2" tabindex="-1"><a class="header-anchor" href="#版本2" aria-hidden="true">#</a> 版本2</h3>`,8),u={href:"https://www.zhihu.com/question/394163745/answer/3189510452?utm_psn=1838992169534361600",target:"_blank",rel:"noopener noreferrer"};function d(k,m){const s=t("ExternalLinkIcon");return o(),p("div",null,[r,n("p",null,[a("原文见知乎："),n("a",u,[a("3毫秒之内一个订单重复提交两次，java后台怎么防止订单重复提交？- 知乎"),c(s)])])])}const h=e(i,[["render",d],["__file","后端场景面试题.html.vue"]]);export{h as default};
