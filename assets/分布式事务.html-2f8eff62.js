import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as s,e as a}from"./app-3d4993ca.js";const i={},l=a(`<h2 id="本地消息表方案" tabindex="-1"><a class="header-anchor" href="#本地消息表方案" aria-hidden="true">#</a> 本地消息表方案</h2><p>基于本地消息表的分布式事务的核心做法是：在执行业务操作的时候，记录一条消息到本地DB，并且<strong>记录消息的操作与业务数据的记录必须在同一个事务内完成</strong></p><p>对于生产者，通常干了4件事：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//基本逻辑</span>
<span class="token comment">//事务begin</span>
<span class="token punctuation">{</span>
    <span class="token comment">//1.业务逻辑操作数据库</span>
    <span class="token comment">//2.向消息表中记录消息（此时记录的消息状态为：未发送）</span>
<span class="token punctuation">}</span>
<span class="token comment">//事务commit</span>
<span class="token comment">//3.发送消息</span>
<span class="token comment">//4.修改消息状态（修改消息状态为：已发送）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitee.com/eddie-lucas/images/raw/master/img/image-20240825095951649.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可能的异常情况：</p><ul><li>步骤1失败，会导致步骤1和2事务回滚，消息不会发送出去，相当于什么事都没发生，可以前端提示失败重试</li><li>步骤2失败，会导致步骤1和2事务回滚，消息不会发送出去，相当于什么事都没发生，可以前端提示失败重试</li><li>步骤3失败，本地事务执行成功了，消息表中的状态为未发送，定时任务扫描消息表，能够重试发送过期消息（过期消息定义：状态为未发送且超过一定时间，比如超过2分钟还没变成已发送）</li><li>步骤4失败，同上</li><li>步骤5失败，MQ有ACK机制，消费者没有响应ACK，会重新投递消息（ACK一定要等到消费者消费逻辑执行完毕进行手动ACK），如果一直不行，还有定时任务进行兜底</li><li>步骤6失败，步骤6属于消费逻辑，因此不会响应ACK，会重新投递消息进行消费，如果一直不行，还有定时任务进行兜底</li><li>步骤7、8、9任何步骤失败，消息表中的状态为已发送，定时任务扫描消息表，发现状态超过2分钟还未变成消费成功，重试发送</li></ul><p><strong>上述操作的前提是能够保证幂等性，否则会出现重复消费</strong></p><blockquote><p>本地消息表的优缺点</p></blockquote><p>优点：技术简单，容易实现，核心就是一张本地消息表，整个过程围绕着这张表进行增删改查</p><p>缺点：消息表必须和业务数据在同一个数据库，并且不能重复利用，如果有多个服务，多个数据库，每个数据库都要一张消息表</p>`,11),t=[l];function c(o,p){return e(),s("div",null,t)}const m=n(i,[["render",c],["__file","分布式事务.html.vue"]]);export{m as default};
