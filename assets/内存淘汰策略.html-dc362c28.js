import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as l,c as a,e as o}from"./app-3d4993ca.js";const i={},s=o(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p>Redis 的内存淘汰策略是指当Redis的内存使用量达到设定的上限时，决定哪些数据应该被移除以便为新数据腾出空间的规则。Redis 提供了多种内存淘汰策略，可以通过配置文件中的 <code>maxmemory-policy</code> 指令来设置。以下是 Redis 支持的主要内存淘汰策略：</p><ol><li><strong>noeviction</strong>：这是默认策略，当内存使用达到限制时，Redis 会拒绝新的写入操作，并返回错误，但不会淘汰任何数据。</li><li><strong>allkeys-lru</strong>：在所有键中，基于最近最少使用（LRU）算法淘汰数据。Redis 会维护一个近似的 LRU 列表，并不保证完全精确，但是对大多数使用场景来说是足够的。</li><li><strong>allkeys-lfu</strong>：在所有键中，基于最少频率使用（LFU）算法淘汰数据。LFU 算法会跟踪每个键的访问频率，并淘汰访问频率最低的键。</li><li><strong>volatile-lru</strong>：仅在设置了过期时间的键中，基于 LRU 算法淘汰数据。</li><li><strong>volatile-lfu</strong>：仅在设置了过期时间的键中，基于 LFU 算法淘汰数据。</li><li><strong>volatile-random</strong>：在设置了过期时间的键中随机选择淘汰。</li><li><strong>allkeys-random</strong>：在所有键中随机选择淘汰。</li><li><strong>volatile-ttl</strong>：在设置了过期时间的键中，淘汰那些 TTL（Time To Live）值最小的键，也就是即将过期的键。</li></ol><p>以上是8种不同的淘汰策略，选择哪种淘汰策略取决于具体的使用场景和业务需求。例如，如果你希望 Redis 作为缓存使用，并且缓存的数据大多是临时性的，那么可能会选择 <code>allkeys-lru</code> 或 <code>volatile-lru</code>。如果你的应用中有明确的热点数据，可能会选择 <code>allkeys-lfu</code> 或 <code>volatile-lfu</code> 来确保热点数据不会被轻易淘汰。</p><p>Redis 还提供了一些工具和命令来帮助监控和优化内存使用，例如 <code>INFO memory</code> 命令可以查看内存使用情况，<code>CONFIG SET maxmemory</code> 可以动态调整内存上限。</p><p>在 Redis 4.0 版本后引入了 <code>MEMORY</code> 命令，可以更细致地管理和分析内存使用情况。例如，<code>MEMORY USAGE</code> 可以估算键值对的内存使用量，<code>MEMORY STATS</code> 可以显示内存使用的详细信息。</p><p>Redis 的内存淘汰是在后台异步进行的，因此即使达到了内存上限，也不会立即淘汰数据，而是在新的写入操作发生时根据配置的策略进行淘汰。</p><h2 id="noeviction" tabindex="-1"><a class="header-anchor" href="#noeviction" aria-hidden="true">#</a> noeviction</h2><p><code>noeviction</code> 是 Redis 默认的内存淘汰策略。当 Redis 的内存使用量达到 <code>maxmemory</code> 配置的限制时，如果尝试执行可能导致更多内存使用的命令（如 SET、LPUSH、SADD 等），Redis 将返回错误，而不是淘汰任何现有的键值对。</p><h3 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景" aria-hidden="true">#</a> 适用场景</h3><ol><li><strong>数据保留</strong>：如果你的应用场景中，每个数据项都非常重要，不能丢失，那么 <code>noeviction</code> 策略可以确保即使在高内存使用的情况下，数据也不会被自动淘汰。</li><li><strong>内存充足的环境</strong>：如果你的服务器有足够的内存，或者 Redis 实例被限制在一个相对较小的数据集上，那么使用 <code>noeviction</code> 策略可以避免复杂的淘汰逻辑，简化内存管理。</li><li><strong>消息队列</strong>：在某些使用 Redis 作为消息队列的场景中，可能会希望确保所有消息都能被处理，而不是在内存压力下丢失消息。</li><li><strong>缓存预热</strong>：在缓存预热阶段，可能会希望保持缓存数据的完整性，直到缓存稳定后再根据实际访问模式进行淘汰。</li></ol><h3 id="怎么用" tabindex="-1"><a class="header-anchor" href="#怎么用" aria-hidden="true">#</a> 怎么用</h3><ol><li><strong>配置文件设置</strong>：在 Redis 配置文件 <code>redis.conf</code> 中，可以通过设置 <code>maxmemory-policy noeviction</code> 来启用 <code>noeviction</code> 策略。</li></ol><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code> maxmemory-policy noeviction
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li><strong>运行时设置</strong>：也可以在 Redis 运行时使用 <code>CONFIG SET</code> 命令来动态更改内存淘汰策略。</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> CONFIG SET maxmemory-policy noeviction
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li><strong>命令行设置</strong>：如果你使用的是 Redis 命令行工具，也可以在启动 Redis 服务时通过命令行参数设置。</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-server --maxmemory-policy noeviction
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h3><ul><li>当设置为 <code>noeviction</code> 时，Redis 会记录内存使用量，但不会主动淘汰任何键值对。</li><li>如果内存使用量达到限制，Redis 会拒绝那些可能会增加内存使用的命令，并返回错误信息，如 <code>(error)OOM command not allowed when used memory&gt;&#39;maxmemory&#39;</code>。</li><li>这种策略下，只有当客户端显式地删除键值对或键值对过期时，内存才会被释放。</li><li>由于不自动淘汰数据，使用 <code>noeviction</code> 策略时需要更加谨慎地监控内存使用情况，并确保有足够的内存空间来处理数据的增长。</li></ul><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h3><ul><li>使用 <code>noeviction</code> 策略时，需要确保服务器有足够的内存来处理数据的增长，否则 Redis 可能会因为内存不足而无法处理新的写入请求。</li><li>在某些情况下，如果 Redis 长时间无法处理写入请求，可能会导致客户端操作超时或错误，影响应用程序的正常运行。</li><li>如果你的应用可以容忍数据的丢失，或者有其他机制来处理数据淘汰（如定期清理旧数据），那么可以考虑使用其他淘汰策略来更有效地管理内存。</li></ul><h2 id="allkeys-lru" tabindex="-1"><a class="header-anchor" href="#allkeys-lru" aria-hidden="true">#</a> allkeys-lru</h2><p><code>allkeys-lru</code> 是 Redis 的一种内存淘汰策略，全称为 &quot;all keys least recently used&quot;。这种策略会在所有键中，包括那些没有设置过期时间的键，基于最近最少使用算法（LRU）来淘汰数据。</p><h3 id="适用场景-1" tabindex="-1"><a class="header-anchor" href="#适用场景-1" aria-hidden="true">#</a> 适用场景</h3><ol><li><strong>缓存应用</strong>：在缓存场景中，通常需要保留最近被访问的数据，以便快速响应后续的读取请求。<code>allkeys-lru</code> 策略可以确保缓存中的数据是最近被访问的，从而提高缓存效率。</li><li><strong>数据访问模式均匀</strong>：如果你的应用中所有数据的访问模式相对均匀，没有特别明显的热点数据，那么 <code>allkeys-lru</code> 可以作为一个合理的选择，因为它会淘汰最不活跃的数据。</li><li><strong>数据替换</strong>：在某些应用中，可能需要定期替换旧数据以保持数据的新鲜度，<code>allkeys-lru</code> 策略可以帮助实现这一点。</li><li><strong>内存限制严格</strong>：在内存使用有严格限制的环境中，<code>allkeys-lru</code> 可以作为一种自动的数据淘汰机制，以确保内存使用不会超过设定的限制。</li></ol><h3 id="怎么用-1" tabindex="-1"><a class="header-anchor" href="#怎么用-1" aria-hidden="true">#</a> 怎么用</h3><ol><li><strong>配置文件设置</strong>：在 Redis 配置文件 <code>redis.conf</code> 中，可以通过设置 <code>maxmemory-policy allkeys-lru</code> 来启用 <code>allkeys-lru</code> 策略。</li></ol><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code>maxmemory-policy allkeys-lru
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li><strong>运行时设置</strong>：也可以在 Redis 运行时使用 <code>CONFIG SET</code> 命令来动态更改内存淘汰策略。</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> CONFIG SET maxmemory-policy allkeys-lru
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li><strong>命令行设置</strong>：如果你使用的是 Redis 命令行工具，也可以在启动 Redis 服务时通过命令行参数设置。</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-server --maxmemory-policy allkeys-lru
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="小结-1" tabindex="-1"><a class="header-anchor" href="#小结-1" aria-hidden="true">#</a> 小结</h3><ul><li><strong>LRU 算法</strong>：最近最少使用（LRU）是一种常见的页面置换算法，它基于这样一个假设：如果数据最近被访问过，那么将来被访问的几率也更高。LRU 算法会跟踪每个数据项的访问时间，并在需要淘汰数据时选择最久未被访问的数据。</li><li><strong>淘汰过程</strong>：当 Redis 的内存使用量达到 <code>maxmemory</code> 限制时，Redis 会根据 LRU 算法淘汰最久未被访问的键值对，直到内存使用量降到限制以下。</li><li><strong>近似实现</strong>：Redis 实现的 LRU 算法是一个近似版本，它通过定期检查一组随机键，并淘汰其中最久未被访问的键来工作。这样可以在不牺牲太多性能的情况下，近似地实现 LRU 算法。</li><li><strong>配置样本大小</strong>：Redis 允许你通过 <code>maxmemory-samples</code> 配置来调整用于淘汰决策的键样本大小。增加样本大小可以提高淘汰决策的准确性，但可能会增加 CPU 的使用率。</li></ul><h3 id="注意事项-1" tabindex="-1"><a class="header-anchor" href="#注意事项-1" aria-hidden="true">#</a> 注意事项</h3><ul><li><strong>数据丢失</strong>：使用 <code>allkeys-lru</code> 策略时，需要意识到一些最近没有被访问的数据可能会被自动淘汰，这可能导致数据丢失。</li><li><strong>性能考虑</strong>：虽然 LRU 算法可以提高缓存命中率，但 Redis 需要维护额外的访问时间信息，这可能会对性能产生一定影响。</li><li><strong>监控</strong>：建议监控 Redis 的内存使用情况和淘汰事件，以确保系统按预期工作，并及时调整策略或增加内存资源。</li><li><strong>业务适配</strong>：在决定使用 <code>allkeys-lru</code> 策略之前，应考虑业务需求和数据访问模式，确保该策略与业务目标一致。</li></ul><h2 id="allkeys-lfu" tabindex="-1"><a class="header-anchor" href="#allkeys-lfu" aria-hidden="true">#</a> allkeys-lfu</h2><p><code>allkeys-lfu</code> 是 Redis 的一种内存淘汰策略，全称为 &quot;all keys least frequently used&quot;。这种策略会在所有键中，包括那些没有设置过期时间的键，基于最少频率使用算法（LFU）来淘汰数据。</p><h3 id="适用场景-2" tabindex="-1"><a class="header-anchor" href="#适用场景-2" aria-hidden="true">#</a> 适用场景</h3><ol><li><strong>访问模式不均匀</strong>：在数据访问模式不均匀的情况下，某些键可能被频繁访问，而另一些键则很少被访问。<code>allkeys-lfu</code> 策略可以确保经常访问的键不会被轻易淘汰。</li><li><strong>热点数据保留</strong>：如果你的应用中有热点数据，即那些被频繁访问的数据，使用 <code>allkeys-lfu</code> 策略可以确保这些热点数据不会因为最近最少使用算法而被误淘汰。</li><li><strong>数据重要性</strong>：在某些应用中，数据的重要性与其被访问的频率成正比。使用 <code>allkeys-lfu</code> 策略可以保留那些被认为更重要的数据。</li><li><strong>避免数据抖动</strong>：在一些实时性要求高的应用中，如推荐系统或实时分析系统，使用 <code>allkeys-lfu</code> 策略可以减少因为数据被淘汰而导致的抖动。</li></ol><h3 id="怎么用-2" tabindex="-1"><a class="header-anchor" href="#怎么用-2" aria-hidden="true">#</a> 怎么用</h3><ol><li><strong>配置文件设置</strong>：在 Redis 配置文件 <code>redis.conf</code> 中，可以通过设置 <code>maxmemory-policy allkeys-lfu</code> 来启用 <code>allkeys-lfu</code> 策略。</li></ol><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code>maxmemory-policy allkeys-lfu
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li><strong>运行时设置</strong>：也可以在 Redis 运行时使用 <code>CONFIG SET</code> 命令来动态更改内存淘汰策略。</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> CONFIG SET maxmemory-policy allkeys-lfu
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li><strong>命令行设置</strong>：如果你使用的是 Redis 命令行工具，也可以在启动 Redis 服务时通过命令行参数设置。</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-server --maxmemory-policy allkeys-lfu
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="小结-2" tabindex="-1"><a class="header-anchor" href="#小结-2" aria-hidden="true">#</a> 小结</h3><ul><li><strong>LFU 算法</strong>：最少频率使用（LFU）是一种页面置换算法，它基于数据项的访问频率来淘汰数据。LFU 算法会跟踪每个数据项的访问次数，并在需要淘汰数据时选择访问次数最少的数据。</li><li><strong>淘汰过程</strong>：当 Redis 的内存使用量达到 <code>maxmemory</code> 限制时，Redis 会根据 LFU 算法淘汰访问次数最少的键值对，直到内存使用量降到限制以下。</li><li><strong>近似实现</strong>：Redis 实现的 LFU 算法是一个近似版本，它通过维护一个计数器来跟踪每个键的访问频率，并在需要淘汰数据时选择访问频率最低的键。</li><li><strong>配置频率衰减</strong>：Redis 允许通过 <code>lfu-decay-time</code> 配置项来设置访问频率的衰减时间，这有助于平衡最近访问频率和长期访问频率的重要性。</li></ul><h3 id="注意事项-2" tabindex="-1"><a class="header-anchor" href="#注意事项-2" aria-hidden="true">#</a> 注意事项</h3><ul><li><strong>数据淘汰</strong>：使用 <code>allkeys-lfu</code> 策略时，需要意识到那些访问频率较低的数据可能会被自动淘汰，这可能导致某些数据的丢失。</li><li><strong>性能考虑</strong>：虽然 LFU 算法可以保留重要的热点数据，但 Redis 需要维护额外的访问计数器，这可能会对性能产生一定影响。</li><li><strong>监控</strong>：建议监控 Redis 的内存使用情况和淘汰事件，以确保系统按预期工作，并及时调整策略或增加内存资源。</li><li><strong>业务适配</strong>：在决定使用 <code>allkeys-lfu</code> 策略之前，应考虑业务需求和数据访问模式，确保该策略与业务目标一致。</li><li><strong>算法精度</strong>：Redis 的 LFU 实现是一个近似算法，它通过定期检查一组随机键，并淘汰其中访问频率最低的键来工作。这样可以在不牺牲太多性能的情况下，近似地实现 LFU 算法。</li></ul><h2 id="volatile-lru" tabindex="-1"><a class="header-anchor" href="#volatile-lru" aria-hidden="true">#</a> volatile-lru</h2><p><code>volatile-lru</code> 是 Redis 的一种内存淘汰策略，全称为 &quot;volatile keys least recently used&quot;。这种策略仅针对设置了过期时间的键，基于最近最少使用算法（LRU）来淘汰数据。</p><h3 id="适用场景-3" tabindex="-1"><a class="header-anchor" href="#适用场景-3" aria-hidden="true">#</a> 适用场景</h3><ol><li><strong>缓存与过期数据</strong>：在缓存数据时，通常会为缓存项设置一个过期时间。<code>volatile-lru</code> 策略可以确保在内存不足时，最近最少被使用的过期键首先被移除。</li><li><strong>临时数据存储</strong>：对于需要临时存储的数据，如会话信息或临时计算结果，这些数据通常有明确的过期时间。使用 <code>volatile-lru</code> 策略可以有效地管理这些临时数据。</li><li><strong>热点数据保护</strong>：如果你希望保护那些没有设置过期时间的热点数据不被误淘汰，<code>volatile-lru</code> 策略可以确保只有那些即将过期的数据才会被考虑淘汰。</li><li><strong>数据时效性</strong>：在数据具有较强时效性的场景中，如新闻文章或实时数据，使用 <code>volatile-lru</code> 策略可以确保旧数据在内存不足时被优先淘汰。</li></ol><h3 id="怎么用-3" tabindex="-1"><a class="header-anchor" href="#怎么用-3" aria-hidden="true">#</a> 怎么用</h3><ol><li><strong>配置文件设置</strong>：在 Redis 配置文件 <code>redis.conf</code> 中，可以通过设置 <code>maxmemory-policy volatile-lru</code> 来启用 <code>volatile-lru</code> 策略。</li></ol><div class="language-pgsql line-numbers-mode" data-ext="pgsql"><pre class="language-pgsql"><code>maxmemory-policy volatile-lru
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li><strong>运行时设置</strong>：也可以在 Redis 运行时使用 <code>CONFIG SET</code> 命令来动态更改内存淘汰策略。</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> CONFIG SET maxmemory-policy volatile-lru
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li><strong>命令行设置</strong>：如果你使用的是 Redis 命令行工具，也可以在启动 Redis 服务时通过命令行参数设置。</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-server --maxmemory-policy volatile-lru
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="小结-3" tabindex="-1"><a class="header-anchor" href="#小结-3" aria-hidden="true">#</a> 小结</h3><ul><li><strong>LRU 算法</strong>：最近最少使用（LRU）是一种常见的页面置换算法，它基于这样一个假设：如果数据最近被访问过，那么将来被访问的几率也更高。LRU 算法会跟踪每个数据项的访问时间，并在需要淘汰数据时选择最久未被访问的数据。</li><li><strong>淘汰过程</strong>：当 Redis 的内存使用量达到 <code>maxmemory</code> 限制时，Redis 会根据 LRU 算法淘汰最久未被访问的设置了过期时间的键值对，直到内存使用量降到限制以下。</li><li><strong>近似实现</strong>：Redis 实现的 LRU 算法是一个近似版本，它通过定期检查一组随机键，并淘汰其中最久未被访问的键来工作。这样可以在不牺牲太多性能的情况下，近似地实现 LRU 算法。</li><li><strong>配置样本大小</strong>：Redis 允许你通过 <code>maxmemory-samples</code> 配置来调整用于淘汰决策的键样本大小。增加样本大小可以提高淘汰决策的准确性，但可能会增加 CPU 的使用率。</li></ul><h3 id="注意事项-3" tabindex="-1"><a class="header-anchor" href="#注意事项-3" aria-hidden="true">#</a> 注意事项</h3><ul><li><strong>数据淘汰</strong>：使用 <code>volatile-lru</code> 策略时，需要意识到那些最近没有被访问且即将过期的数据可能会被自动淘汰，这可能导致数据丢失。</li><li><strong>性能考虑</strong>：虽然 LRU 算法可以提高缓存命中率，但 Redis 需要维护额外的访问时间信息，这可能会对性能产生一定影响。</li><li><strong>监控</strong>：建议监控 Redis 的内存使用情况和淘汰事件，以确保系统按预期工作，并及时调整策略或增加内存资源。</li><li><strong>业务适配</strong>：在决定使用 <code>volatile-lru</code> 策略之前，应考虑业务需求和数据访问模式，确保该策略与业务目标一致。</li><li><strong>数据保护</strong>：如果你的应用中有重要的数据没有设置过期时间，需要注意 <code>volatile-lru</code> 策略不会淘汰这些数据，从而可以保护这些数据不被误淘汰。</li></ul><h2 id="volatile-lfu" tabindex="-1"><a class="header-anchor" href="#volatile-lfu" aria-hidden="true">#</a> volatile-lfu</h2><p><code>volatile-lfu</code> 是 Redis 的一种内存淘汰策略，全称为 &quot;volatile keys least frequently used&quot;。这种策略仅针对设置了过期时间的键，基于最少频率使用算法（LFU）来淘汰数据。</p><h3 id="适用场景-4" tabindex="-1"><a class="header-anchor" href="#适用场景-4" aria-hidden="true">#</a> 适用场景</h3><ol><li><strong>缓存与频率限制</strong>：在缓存数据时，如果某些数据项被访问的频率非常低，即使它们最近被访问过，也可能不是很重要。<code>volatile-lfu</code> 策略可以确保这些不常访问的键被优先淘汰。</li><li><strong>临时数据存储</strong>：对于有明确过期时间的临时数据，如用户会话或缓存的API响应，<code>volatile-lfu</code> 策略可以在内存不足时，根据访问频率来淘汰这些临时数据。</li><li><strong>数据时效性与访问频率</strong>：在数据具有较强时效性且访问频率不均匀的场景中，<code>volatile-lfu</code> 策略可以结合时效性和访问频率来决定数据的保留优先级。</li><li><strong>热点数据与临时数据的平衡</strong>：如果你希望保护那些频繁访问的临时数据不被轻易淘汰，同时淘汰那些不常访问的临时数据，<code>volatile-lfu</code> 策略可以实现这种平衡。</li></ol><h3 id="怎么用-4" tabindex="-1"><a class="header-anchor" href="#怎么用-4" aria-hidden="true">#</a> 怎么用</h3><ol><li><strong>配置文件设置</strong>：在 Redis 配置文件 <code>redis.conf</code> 中，可以通过设置 <code>maxmemory-policy volatile-lfu</code> 来启用 <code>volatile-lfu</code> 策略。</li></ol><div class="language-pgsql line-numbers-mode" data-ext="pgsql"><pre class="language-pgsql"><code>maxmemory-policy volatile-lfu
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li><strong>运行时设置</strong>：也可以在 Redis 运行时使用 <code>CONFIG SET</code> 命令来动态更改内存淘汰策略。</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> CONFIG SET maxmemory-policy volatile-lfu
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li><strong>命令行设置</strong>：如果你使用的是 Redis 命令行工具，也可以在启动 Redis 服务时通过命令行参数设置。</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-server --maxmemory-policy volatile-lfu
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="小结-4" tabindex="-1"><a class="header-anchor" href="#小结-4" aria-hidden="true">#</a> 小结</h3><ul><li><strong>LFU 算法</strong>：最少频率使用（LFU）是一种页面置换算法，它基于数据项的访问频率来淘汰数据。LFU 算法会跟踪每个数据项的访问次数，并在需要淘汰数据时选择访问次数最少的数据。</li><li><strong>淘汰过程</strong>：当 Redis 的内存使用量达到 <code>maxmemory</code> 限制时，Redis 会根据 LFU 算法淘汰设置了过期时间但访问次数最少的键值对，直到内存使用量降到限制以下。</li><li><strong>近似实现</strong>：Redis 实现的 LFU 算法是一个近似版本，它通过维护一个计数器来跟踪每个键的访问频率，并在需要淘汰数据时选择访问频率最低的键。</li><li><strong>配置频率衰减</strong>：Redis 允许通过 <code>lfu-decay-time</code> 配置项来设置访问频率的衰减时间，这有助于平衡最近访问频率和长期访问频率的重要性。</li></ul><h3 id="注意事项-4" tabindex="-1"><a class="header-anchor" href="#注意事项-4" aria-hidden="true">#</a> 注意事项</h3><ul><li><strong>数据淘汰</strong>：使用 <code>volatile-lfu</code> 策略时，需要意识到那些访问频率较低且即将过期的数据可能会被自动淘汰，这可能导致数据丢失。</li><li><strong>性能考虑</strong>：虽然 LFU 算法可以保留重要的热点数据，但 Redis 需要维护额外的访问计数器，这可能会对性能产生一定影响。</li><li><strong>监控</strong>：建议监控 Redis 的内存使用情况和淘汰事件，以确保系统按预期工作，并及时调整策略或增加内存资源。</li><li><strong>业务适配</strong>：在决定使用 <code>volatile-lfu</code> 策略之前，应考虑业务需求和数据访问模式，确保该策略与业务目标一致。</li><li><strong>算法精度</strong>：Redis 的 LFU 实现是一个近似算法，它通过定期检查一组随机键，并淘汰其中访问频率最低的键来工作。这样可以在不牺牲太多性能的情况下，近似地实现 LFU 算法。</li></ul><h2 id="volatile-random" tabindex="-1"><a class="header-anchor" href="#volatile-random" aria-hidden="true">#</a> volatile-random</h2><p><code>volatile-random</code> 是 Redis 的一种内存淘汰策略，全称为 &quot;volatile keys random&quot;。这种策略仅针对设置了过期时间的键，随机淘汰数据。</p><h3 id="适用场景-5" tabindex="-1"><a class="header-anchor" href="#适用场景-5" aria-hidden="true">#</a> 适用场景</h3><ol><li><strong>过期数据的不确定性</strong>：当你希望在内存不足时随机淘汰一些即将过期的数据，而不是基于访问模式或频率时，<code>volatile-random</code> 是一个合适的选择。</li><li><strong>简化的淘汰逻辑</strong>：如果你不需要复杂的淘汰逻辑，而只是希望在内存压力下随机释放一些空间，那么 <code>volatile-random</code> 策略可以满足需求。</li><li><strong>临时数据存储</strong>：对于存储临时数据的场景，如缓存的会话信息或临时计算结果，如果这些数据的丢失不会对系统造成重大影响，可以使用 <code>volatile-random</code> 策略。</li><li><strong>避免热点数据误伤</strong>：如果你希望避免基于访问模式淘汰数据，从而可能误伤热点数据，<code>volatile-random</code> 策略可以提供一个更为“公平”的淘汰机制。</li></ol><h3 id="怎么用-5" tabindex="-1"><a class="header-anchor" href="#怎么用-5" aria-hidden="true">#</a> 怎么用</h3><ol><li><strong>配置文件设置</strong>：在 Redis 配置文件 <code>redis.conf</code> 中，可以通过设置 <code>maxmemory-policy volatile-random</code> 来启用 <code>volatile-random</code> 策略。</li></ol><div class="language-arduino line-numbers-mode" data-ext="arduino"><pre class="language-arduino"><code>maxmemory<span class="token operator">-</span>policy volatile<span class="token operator">-</span><span class="token builtin">random</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li><strong>运行时设置</strong>：也可以在 Redis 运行时使用 <code>CONFIG SET</code> 命令来动态更改内存淘汰策略。</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> CONFIG SET maxmemory-policy volatile-random
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li><strong>命令行设置</strong>：如果你使用的是 Redis 命令行工具，也可以在启动 Redis 服务时通过命令行参数设置。</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-server --maxmemory-policy volatile-random
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="小结-5" tabindex="-1"><a class="header-anchor" href="#小结-5" aria-hidden="true">#</a> 小结</h3><ul><li><strong>随机淘汰</strong>：<code>volatile-random</code> 策略会在达到内存限制时，从所有设置了过期时间的键中随机选择一些键进行淘汰。</li><li><strong>淘汰过程</strong>：Redis 会维护一个设置了过期时间的键的列表，当需要淘汰数据时，它会从这个列表中随机选择键来淘汰，直到内存使用量降到限制以下。</li><li><strong>简单且快速</strong>：这种策略的实现相对简单，不需要跟踪每个键的访问时间或频率，因此在执行淘汰操作时可以非常快速。</li><li><strong>公平性</strong>：由于淘汰是基于随机性的，因此这种策略在一定程度上可以认为是“公平”的，因为它不偏向于任何特定的数据。</li></ul><h3 id="注意事项-5" tabindex="-1"><a class="header-anchor" href="#注意事项-5" aria-hidden="true">#</a> 注意事项</h3><ul><li><strong>数据淘汰的不确定性</strong>：使用 <code>volatile-random</code> 策略时，任何设置了过期时间的数据都有可能被淘汰，这可能导致一些重要的数据被意外淘汰。</li><li><strong>性能考虑</strong>：虽然随机淘汰策略的实现简单且快速，但频繁的淘汰操作可能会对性能产生一定影响，尤其是在内存使用率较高时。</li><li><strong>监控</strong>：建议监控 Redis 的内存使用情况和淘汰事件，以确保系统按预期工作，并及时调整策略或增加内存资源。</li><li><strong>业务适配</strong>：在决定使用 <code>volatile-random</code> 策略之前，应考虑业务需求和数据的重要性，确保该策略与业务目标一致。</li><li><strong>数据保护</strong>：如果你的应用中有重要的数据设置了过期时间，需要注意 <code>volatile-random</code> 策略可能会淘汰这些数据，从而需要考虑额外的数据保护措施。</li></ul><h2 id="allkeys-random" tabindex="-1"><a class="header-anchor" href="#allkeys-random" aria-hidden="true">#</a> allkeys-random</h2><p><code>allkeys-random</code> 是 Redis 的一种内存淘汰策略，全称为 &quot;all keys random&quot;。这种策略会在所有键中，无论是否设置了过期时间，随机淘汰数据。</p><h3 id="适用场景-6" tabindex="-1"><a class="header-anchor" href="#适用场景-6" aria-hidden="true">#</a> 适用场景</h3><ol><li><strong>无差别数据</strong>：如果你的缓存数据没有明显的访问模式差异，即所有数据的访问频率和重要性都差不多，那么 <code>allkeys-random</code> 可以作为一个简单的淘汰策略。</li><li><strong>负载均衡</strong>：在分布式缓存环境中，如果所有节点的内存容量都接近上限，使用 <code>allkeys-random</code> 策略可以确保淘汰操作在各个节点之间相对均衡。</li><li><strong>非关键数据</strong>：如果你缓存的数据是非关键数据，即使部分数据被随机淘汰也不会对业务造成显著影响，那么这种策略可以减少系统的复杂性。</li><li><strong>临时解决方案</strong>：在紧急情况下，如内存泄漏或其他问题导致内存压力突然增大，<code>allkeys-random</code> 可以作为一个快速反应的淘汰策略。</li></ol><h3 id="怎么用-6" tabindex="-1"><a class="header-anchor" href="#怎么用-6" aria-hidden="true">#</a> 怎么用</h3><ol><li><strong>配置文件设置</strong>：在 Redis 配置文件 <code>redis.conf</code> 中，可以通过设置 <code>maxmemory-policy allkeys-random</code> 来启用 <code>allkeys-random</code> 策略。</li></ol><div class="language-arcade line-numbers-mode" data-ext="arcade"><pre class="language-arcade"><code>maxmemory-policy allkeys-random
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li><strong>运行时设置</strong>：也可以在 Redis 运行时使用 <code>CONFIG SET</code> 命令来动态更改内存淘汰策略。</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> CONFIG SET maxmemory-policy allkeys-random
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li><strong>命令行设置</strong>：如果你使用的是 Redis 命令行工具，也可以在启动 Redis 服务时通过命令行参数设置。</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-server --maxmemory-policy allkeys-random
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="小结-6" tabindex="-1"><a class="header-anchor" href="#小结-6" aria-hidden="true">#</a> 小结</h3><ul><li><strong>随机淘汰</strong>：<code>allkeys-random</code> 策略会在达到内存限制时，从所有键中随机选择一些键进行淘汰。</li><li><strong>淘汰过程</strong>：Redis 会维护一个所有键的列表，当需要淘汰数据时，它会从这个列表中随机选择键来淘汰，直到内存使用量降到限制以下。</li><li><strong>简单且快速</strong>：这种策略的实现相对简单，不需要跟踪每个键的访问时间或频率，因此在执行淘汰操作时可以非常快速。</li><li><strong>公平性</strong>：由于淘汰是基于随机性的，因此这种策略在一定程度上可以认为是“公平”的，因为它不偏向于任何特定的数据。</li></ul><h3 id="注意事项-6" tabindex="-1"><a class="header-anchor" href="#注意事项-6" aria-hidden="true">#</a> 注意事项</h3><ul><li><strong>数据淘汰的不确定性</strong>：使用 <code>allkeys-random</code> 策略时，任何数据都有可能被淘汰，这可能导致一些重要的数据被意外淘汰。</li><li><strong>性能考虑</strong>：虽然随机淘汰策略的实现简单且快速，但频繁的淘汰操作可能会对性能产生一定影响，尤其是在内存使用率较高时。</li><li><strong>监控</strong>：建议监控 Redis 的内存使用情况和淘汰事件，以确保系统按预期工作，并及时调整策略或增加内存资源。</li><li><strong>业务适配</strong>：在决定使用 <code>allkeys-random</code> 策略之前，应考虑业务需求和数据的重要性，确保该策略与业务目标一致。</li><li><strong>数据保护</strong>：如果你的应用中有重要的数据，需要注意 <code>allkeys-random</code> 策略可能会淘汰这些数据，从而需要考虑额外的数据保护措施。</li></ul><h2 id="volatile-ttl" tabindex="-1"><a class="header-anchor" href="#volatile-ttl" aria-hidden="true">#</a> volatile-ttl</h2><p><code>volatile-ttl</code> 是 Redis 的一种内存淘汰策略，全称为 &quot;volatile keys with the smallest Time To Live&quot;。这种策略仅针对设置了过期时间的键，淘汰那些剩余生存时间（TTL）最短的键。</p><h3 id="适用场景-7" tabindex="-1"><a class="header-anchor" href="#适用场景-7" aria-hidden="true">#</a> 适用场景</h3><ol><li><strong>临时数据缓存</strong>：对于那些有明确过期时间的临时数据，如会话信息、定时任务结果等，<code>volatile-ttl</code> 策略可以确保这些数据在内存不足时按照 TTL 顺序被清除。</li><li><strong>数据时效性管理</strong>：在数据具有较强时效性的场景中，如新闻快讯或实时报价，<code>volatile-ttl</code> 策略可以确保最接近过期的数据首先被移除。</li><li><strong>过期数据优先淘汰</strong>：如果你希望在内存不足时优先淘汰那些即将过期的数据，而不是其他数据，<code>volatile-ttl</code> 提供了一种直接的方式来实现这一目标。</li><li><strong>内存优化</strong>：在内存资源有限的情况下，<code>volatile-ttl</code> 策略可以帮助优化内存使用，确保内存中的数据尽可能是有用的，即将过期的数据被及时清除。</li></ol><h3 id="怎么用-7" tabindex="-1"><a class="header-anchor" href="#怎么用-7" aria-hidden="true">#</a> 怎么用</h3><ol><li><strong>配置文件设置</strong>：在 Redis 配置文件 <code>redis.conf</code> 中，可以通过设置 <code>maxmemory-policy volatile-ttl</code> 来启用 <code>volatile-ttl</code> 策略。</li></ol><div class="language-pgsql line-numbers-mode" data-ext="pgsql"><pre class="language-pgsql"><code>maxmemory-policy volatile-ttl
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li><strong>运行时设置</strong>：也可以在 Redis 运行时使用 <code>CONFIG SET</code> 命令来动态更改内存淘汰策略。</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> CONFIG SET maxmemory-policy volatile-ttl
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li><strong>命令行设置</strong>：如果你使用的是 Redis 命令行工具，也可以在启动 Redis 服务时通过命令行参数设置。</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-server --maxmemory-policy volatile-ttl
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="小结-7" tabindex="-1"><a class="header-anchor" href="#小结-7" aria-hidden="true">#</a> 小结</h3><ul><li><strong>TTL 淘汰</strong>：<code>volatile-ttl</code> 策略会根据键的剩余生存时间来淘汰数据。Redis 会跟踪每个设置了过期时间的键的 TTL，并在需要淘汰数据时选择 TTL 最短的键。</li><li><strong>淘汰过程</strong>：当 Redis 的内存使用量达到 <code>maxmemory</code> 限制时，Redis 会查找所有设置了过期时间的键，并淘汰那些 TTL 最短的键，直到内存使用量降到限制以下。</li><li><strong>实时性</strong>：这种策略可以确保内存中的数据尽可能是最新的，因为它倾向于淘汰那些即将过期的数据。</li><li><strong>配置样本大小</strong>：虽然 <code>volatile-ttl</code> 策略不涉及 <code>maxmemory-samples</code> 的配置，但它仍然需要定期检查键的 TTL，以便做出淘汰决策。</li></ul><h3 id="注意事项-7" tabindex="-1"><a class="header-anchor" href="#注意事项-7" aria-hidden="true">#</a> 注意事项</h3><ul><li><strong>数据淘汰的不确定性</strong>：使用 <code>volatile-ttl</code> 策略时，需要注意即使某些数据的 TTL 很短，它们也可能在内存不足时被保留，这取决于其他键的 TTL 值。</li><li><strong>性能考虑</strong>：虽然 TTL 淘汰策略的实现相对简单，但频繁的淘汰操作可能会对性能产生一定影响，尤其是在内存使用率较高时。</li><li><strong>监控</strong>：建议监控 Redis 的内存使用情况和淘汰事件，以确保系统按预期工作，并及时调整策略或增加内存资源。</li><li><strong>业务适配</strong>：在决定使用 <code>volatile-ttl</code> 策略之前，应考虑业务需求和数据的时效性，确保该策略与业务目标一致。</li><li><strong>数据保护</strong>：如果你的应用中有重要的数据设置了过期时间，需要注意 <code>volatile-ttl</code> 策略可能会淘汰这些数据，从而需要考虑额外的数据保护措施。</li></ul>`,127),d=[s];function r(n,t){return l(),a("div",null,d)}const h=e(i,[["render",r],["__file","内存淘汰策略.html.vue"]]);export{h as default};
