import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-3d4993ca.js";const t={},p=e(`<h2 id="_3种发送方式" tabindex="-1"><a class="header-anchor" href="#_3种发送方式" aria-hidden="true">#</a> 3种发送方式</h2><p>RocketMQ支持3种消息发送方式：同步，异步，单向</p><ul><li>同步：生产者发送消息后，同步等待，直到返回结果</li><li>异步：生产者发送消息时，指定回调函数，发送消息后，立即返回，程序继续向下执行；消息发送成功或失败的回调函数在一个新线程中执行</li><li>单向：生产者发送消息后直接返回，不等待结果，也不指定回调函数，也就是只管发送</li></ul><p>这里只通过同步消息的发送来深入了解MQ的消息发送</p><h2 id="高可用设计" tabindex="-1"><a class="header-anchor" href="#高可用设计" aria-hidden="true">#</a> 高可用设计</h2><p>RokcetMQ为了实现消息发送的高可用，有几个非常重要的机制：</p><ul><li>重试机制：对于同步消息，发送失败后，默认会再重试两次</li><li>故障规避机制：当消息第一次发送失败后，下一次重试发送消息的时候会尽量避免刚刚失败的broker，而是选择其他broker，提高消息发送的成功率</li><li>故障延迟机制：启用故障延迟，发送状态为发送失败的broker，一段时间内都会被规避</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//对于同步发送的方式，值为3</span>
<span class="token keyword">int</span> timesTotal <span class="token operator">=</span> communicationMode <span class="token operator">==</span> <span class="token class-name">CommunicationMode</span><span class="token punctuation">.</span><span class="token constant">SYNC</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">getRetryTimesWhenSendFailed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> times <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> brokersSent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>timesTotal<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//失败可以重试，发送成功跳出循环</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> times <span class="token operator">&lt;</span> timesTotal<span class="token punctuation">;</span> times<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//lastBrokerName是上一次发送消息失败的broker</span>
    <span class="token class-name">String</span> lastBrokerName <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token operator">==</span> mq <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> mq<span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//选择消息队列，故障延迟机制需要设置</span>
    <span class="token class-name">MessageQueue</span> mqSelected <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">selectOneMessageQueue</span><span class="token punctuation">(</span>topicPublishInfo<span class="token punctuation">,</span> lastBrokerName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mqSelected <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">//发送消息逻辑</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="发送流程" tabindex="-1"><a class="header-anchor" href="#发送流程" aria-hidden="true">#</a> 发送流程</h2><figure><img src="https://gitee.com/eddie-lucas/images/raw/master/img/MQ发送消息流程.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,10),o=[p];function c(l,i){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","消息发送.html.vue"]]);export{k as default};
