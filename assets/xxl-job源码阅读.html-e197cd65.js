import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-3d4993ca.js";const p={},e=t(`<h2 id="调度中心启动流程" tabindex="-1"><a class="header-anchor" href="#调度中心启动流程" aria-hidden="true">#</a> 调度中心启动流程</h2><p>xxl-job调度中心的入口是<code>XxlJobAdminConfig#afterPropertiesSet</code>，该方法的执行时序图如下，类<code>XxlJobAdminConfig</code>实现了spring的<code>InitializingBean</code>及接口，afterPropertiesSet方法在对象属性填充完毕之后调用</p><figure><img src="https://gitee.com/eddie-lucas/images/raw/master/img/image-20240604161502848.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token comment">//此时对象已经实例化了，因此这个this，能够获取到当前类的实例化对象，此处是使用单例模式</span>
    adminConfig <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>

    xxlJobScheduler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XxlJobScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    xxlJobScheduler<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心的启动流程其实都位于<code>xxlJobScheduler#init</code>，通过看注释，可以暂时忽略monitor以及log相关的代码，这部分并不是了解原理的重要部分，因此在我看来，这个方法中比较重要的就是两个步骤：</p><ol><li>创建了两个线程池：快调度线程池（<strong>fastTriggerPool</strong>），慢调度线程池（<strong>slowTriggerPool</strong>）</li><li>开始调度，核心代码部分</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token comment">// init i18n 国际化相关</span>
    <span class="token function">initI18n</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// admin trigger pool start</span>
    <span class="token comment">//创建了两个线程池：快调度线程池，慢调度线程池</span>
    <span class="token class-name">JobTriggerPoolHelper</span><span class="token punctuation">.</span><span class="token function">toStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// admin registry monitor run</span>
    <span class="token class-name">JobRegistryHelper</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// admin fail-monitor run</span>
    <span class="token class-name">JobFailMonitorHelper</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// admin lose-monitor run ( depend on JobTriggerPoolHelper )</span>
    <span class="token class-name">JobCompleteHelper</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// admin log report start</span>
    <span class="token class-name">JobLogReportHelper</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// start-schedule  ( depend on JobTriggerPoolHelper )</span>
	<span class="token comment">//开始调度，核心代码</span>
    <span class="token class-name">JobScheduleHelper</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; init xxl-job admin success.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>创建快慢线程池</p></blockquote><p>这两个线程池是用来调度任务的，优先选择fastTriggerPool，当1分钟以内任务执行超时10次，就会选择slowTriggerPool，&gt;500ms就算超时，统计次数+1</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//核心线程数：10 最大线程数：200，最多处理1000任务</span>
    fastTriggerPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>
        <span class="token number">10</span><span class="token punctuation">,</span>
        <span class="token class-name">XxlJobAdminConfig</span><span class="token punctuation">.</span><span class="token function">getAdminConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTriggerPoolFastMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token number">60L</span><span class="token punctuation">,</span>
        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">ThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Thread</span> <span class="token function">newThread</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">&quot;xxl-job, admin JobTriggerPoolHelper-fastTriggerPool-&quot;</span> <span class="token operator">+</span> r<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//核心线程数：10 最大线程数：100，最多处理2000任务</span>
    slowTriggerPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>
        <span class="token number">10</span><span class="token punctuation">,</span>
        <span class="token class-name">XxlJobAdminConfig</span><span class="token punctuation">.</span><span class="token function">getAdminConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTriggerPoolSlowMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token number">60L</span><span class="token punctuation">,</span>
        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">ThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Thread</span> <span class="token function">newThread</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">&quot;xxl-job, admin JobTriggerPoolHelper-slowTriggerPool-&quot;</span> <span class="token operator">+</span> r<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>调度部分的核心代码</p></blockquote><p>代码折叠之后，可以看到，启动了两个线程，一个<code>scheduleThread</code>，一个<code>ringThread</code>，看名字能感受到第一个线程主要是用来调度的，第二个线程主要是用来提醒的，类似于闹钟，到时间了就响</p><figure><img src="https://gitee.com/eddie-lucas/images/raw/master/img/image-20240604165518062.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>scheduleThread干了什么？</p></blockquote><p>首先会通过语句<code>select * from xxl_job_lock where lock_name = &#39;schedule_lock&#39; for update</code>进行加锁查询出**下次调度时间&lt;=（当前时间+5s）**的前6000条数据，然后根据下次调度时间将这6000条数据分为三类：</p><ol><li>下次调度时间距离当前时间过期了5s以上</li><li>过期了5s以内</li><li>调度时间在未来5s</li></ol><figure><img src="https://gitee.com/eddie-lucas/images/raw/master/img/image-20240606185431520.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>对于这三类数据，采取不同的执行逻辑：</p><ul><li>过期&gt;5s：查看调度策略，如果是<code>FIRE_ONCE_NOW</code>，则立即执行一次，然后更新下次调度时间，否则只是根据我们创建任务时候的配置更新下次调度的时间</li><li>过期&lt;5s：直接调度执行，然后更新下次调度时间，如果下次调度时间在当前时间+5s的范围内，加入到<code>ringData</code>，它是一个<strong>ConcurrentHashMap</strong>，key是下次调度时间（秒为单位），value是到这个时间要执行的任务的jobId</li><li>未来5s：同上，放到<code>ringData</code>中，然后更新下次调度时间</li></ul><p>可以看到，在scheduleThread中，除了对过期任务有特殊处理，会调度执行任务，对于未过期的任务，只是简单的将其放到一个map中，看到这里，应该能够很自然的想到，之后的ringThread肯定会不停的从<code>ringData</code>中拿到要执行的任务，然后进行执行</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//将任务放到ringData的代码</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">pushTimeRing</span><span class="token punctuation">(</span><span class="token keyword">int</span> ringSecond<span class="token punctuation">,</span> <span class="token keyword">int</span> jobId<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// push async ring</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> ringItemData <span class="token operator">=</span> ringData<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ringSecond<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ringItemData <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ringItemData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ringData<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ringSecond<span class="token punctuation">,</span> ringItemData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ringItemData<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jobId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>ringThread干了什么？</p></blockquote><p>ringThread根据调度时间从map中取出要执行的任务的list，遍历list，根据jobId取调度任务，这段代码的重点是如何取任务的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//获取当前时间的秒数，从0-59</span>
<span class="token comment">// 避免处理耗时太长，跨过刻度，向前校验一个刻度；</span>
<span class="token keyword">int</span> nowSecond <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">SECOND</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> tmpData <span class="token operator">=</span> ringData<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>nowSecond<span class="token operator">+</span><span class="token number">60</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">60</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tmpData <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ringItemData<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>tmpData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结论：<strong>ringThread会从ringData中取出当前时刻和前一时刻（前一秒）的数据</strong>，然后进行调度，可以将nowSecond取任何一个秒数带进去，比如取1，那么，key的值就是1和0</p><p>后面的的细节代码就不贴了，抓大放小，了解原理即可，调度中心调度的过程，其实就是把任务放到一个队列里面，这个queue是<code>xxl-job-core</code>这个module下<code>JobThread</code>类中的一个属性</p><h2 id="执行中心启动流程" tabindex="-1"><a class="header-anchor" href="#执行中心启动流程" aria-hidden="true">#</a> 执行中心启动流程</h2><p>执行中心就是我们通常开发定时任务的地方，通常都是基于Spring进行开发，回想一下开发定时任务的流程：一个任务可以单独建一个类，也可以使用一个类中的方法，以一个方法作为一个定时任务举例，只需要在方法上添加<code>@XxlJob(&quot;demoJobHandler&quot;)</code>注解，并且指明jobhandler的名称就可以了，这就完成了一个定时任务的开发，然后就是在调度中心的控制台添加我们开发的定时任务的配置就可以了</p><p>那么这个开发过程就能够反映出执行中心的工作原理：</p><ul><li>首先，肯定要把所有的定时任务都识别出来，这个应该是通过自定义注解做到的</li><li>自定义注解中的jobhandler的名称在调度中心的控制台页面用到了，应该是通过jobhandler的名称来进行定位，然后执行我们的代码</li></ul><p>通过右键<code>@XxlJob</code>，find usages，可以找到如下图：</p><figure><img src="https://gitee.com/eddie-lucas/images/raw/master/img/image-20240607164149470.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里首先吸引我的就是<code>XxlJobSpringExecutor</code>，一看就是跟spring有关的，然后经过层层定位，终于找到了程序的入口<code>XxlJobSpringExecutor#afterSingletonsInstantiated</code>，先来看一下这个类的结构和接口继承关系</p><figure><img src="https://gitee.com/eddie-lucas/images/raw/master/img/image-20240607165213562.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://gitee.com/eddie-lucas/images/raw/master/img/image-20240607165925007.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到，<code>XxlJobSpringExecutor</code>继承了<code>XxlJobExecutor</code>，然后实现了另外三个接口，然后根据spring的启动流程，可以确定程序的入口在<code>XxlJobSpringExecutor#afterSingletonsInstantiated</code></p><p>做了三件事：</p><ol><li>将所有的jobhandler从spring的容器中找到并放到map中</li><li>刷新GlueFactory</li><li>启动服务（核心代码）</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterSingletonsInstantiated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// init JobHandler Repository</span>
    <span class="token comment">/*initJobHandlerRepository(applicationContext);*/</span>

    <span class="token comment">// init JobHandler Repository (for method)</span>
    <span class="token function">initJobHandlerMethodRepository</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// refresh GlueFactory</span>
    <span class="token class-name">GlueFactory</span><span class="token punctuation">.</span><span class="token function">refreshInstance</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// super start</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过第一步，xxl-job知道了有哪些定时任务，主要看start方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

    <span class="token comment">// init logpath</span>
    <span class="token class-name">XxlJobFileAppender</span><span class="token punctuation">.</span><span class="token function">initLogPath</span><span class="token punctuation">(</span>logPath<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// init invoker, admin-client</span>
    <span class="token function">initAdminBizList</span><span class="token punctuation">(</span>adminAddresses<span class="token punctuation">,</span> accessToken<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token comment">// init JobLogFileCleanThread</span>
    <span class="token class-name">JobLogFileCleanThread</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>logRetentionDays<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// init TriggerCallbackThread</span>
    <span class="token class-name">TriggerCallbackThread</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// init executor-server</span>
    <span class="token function">initEmbedServer</span><span class="token punctuation">(</span>address<span class="token punctuation">,</span> ip<span class="token punctuation">,</span> port<span class="token punctuation">,</span> appname<span class="token punctuation">,</span> accessToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>忽略日志相关的代码，start方法主要做了3件事情：</p><ol><li>initAdminBizList：将调度中心的地址添加到一个list中，用于和调度中心进行通信</li><li>启动一个回调线程，专门用于处理回调相关操作</li><li><strong>启动服务（基于Netty）</strong></li></ol><blockquote><p>启动服务做了什么？</p></blockquote><ol><li>使用netty，绑定端口，等待调度中心调度</li><li>主动向调度中心进行注册，<strong>每隔30s向调度中心发送心跳包</strong></li><li>当要停止的时候，主动剔除服务</li></ol><h2 id="路由策略" tabindex="-1"><a class="header-anchor" href="#路由策略" aria-hidden="true">#</a> 路由策略</h2><p>当执行器集群部署时，提供了丰富的路由策略，主要说一下<code>一致性哈希</code>，因为当调度密集/耗时任务时，可能会导致任务阻塞，集群情况下，可能会导致任务重复执行，官网中说到，可以<strong>通过结合单机路由策略+阻塞策略来避免任务重复执行</strong></p><p>通常采用<code>一致性哈希</code>+<code>丢弃后续调度</code>的做法</p><p>官网中对一致性hash是这么进行说明的：每个任务按照hash算法，固定选择一台机器，且所有任务均匀分散在不通的机器上,由于每个任务固定选择一台机器，所以，对于这个任务来说，它是单机的，并且当任务很耗时，执行了很久，采用丢弃后续调度，避免了任务没完成，而被再次调度</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hashJob</span><span class="token punctuation">(</span><span class="token keyword">int</span> jobId<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> addressList<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// ------A1------A2-------A3------</span>
    <span class="token comment">// -----------J1------------------</span>
    <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> addressRing <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> address<span class="token operator">:</span> addressList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//每个地址进行100次hash</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">VIRTUAL_NODE_NUM</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">long</span> addressHash <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token string">&quot;SHARD-&quot;</span> <span class="token operator">+</span> address <span class="token operator">+</span> <span class="token string">&quot;-NODE-&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            addressRing<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>addressHash<span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">long</span> jobHash <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>jobId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">SortedMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> lastRing <span class="token operator">=</span> addressRing<span class="token punctuation">.</span><span class="token function">tailMap</span><span class="token punctuation">(</span>jobHash<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lastRing<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> lastRing<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>lastRing<span class="token punctuation">.</span><span class="token function">firstKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> addressRing<span class="token punctuation">.</span><span class="token function">firstEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的方法中，<strong>每个执行器的地址进行100次hash</strong>，然后jobid也进行hash,<code>tailMap</code>，从map中找到hash值比jobHash大的执行器，然后进行排序，选择hash值最小的机器，如果找不到，就选择treeMap中的第一个机器</p><blockquote><p>为什么要进行100次hash？</p></blockquote><p>每次hash的参数随i自增，相当于100个不同的hash，对应同一个地址，这样做是为了让hash尽量均衡，这样，任务在选择机器的时候才能均匀散列在不同的机器上</p><blockquote><p>路由策略使用了策略模式</p></blockquote><figure><img src="https://gitee.com/eddie-lucas/images/raw/master/img/image-20240618111659252.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,55),o=[e];function c(i,l){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","xxl-job源码阅读.html.vue"]]);export{k as default};
